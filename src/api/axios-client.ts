//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as AuthControllerClient from './axios-client/AuthControllerClient';

export * as AuthControllerQuery from './axios-client/AuthControllerQuery';



export * as UsersControllerClient from './axios-client/UsersControllerClient';

export * as UsersControllerQuery from './axios-client/UsersControllerQuery';



export * as InspectionControllerClient from './axios-client/InspectionControllerClient';

export * as InspectionControllerQuery from './axios-client/InspectionControllerQuery';



export * as PropertyControllerClient from './axios-client/PropertyControllerClient';

export * as PropertyControllerQuery from './axios-client/PropertyControllerQuery';



export * as CustomerControllerClient from './axios-client/CustomerControllerClient';

export * as CustomerControllerQuery from './axios-client/CustomerControllerQuery';



export * as ClientControllerClient from './axios-client/ClientControllerClient';

export * as ClientControllerQuery from './axios-client/ClientControllerQuery';



export * as ContactControllerClient from './axios-client/ContactControllerClient';

export * as ContactControllerQuery from './axios-client/ContactControllerQuery';



export * as StaticControllerClient from './axios-client/StaticControllerClient';

export * as StaticControllerQuery from './axios-client/StaticControllerQuery';



//-----Types.File-----
export class SignInDto implements ISignInDto {
    email!: string;
    password!: string;

    constructor(data?: ISignInDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignInDto {
        data = typeof data === 'object' ? data : {};
        let result = new SignInDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ISignInDto {
    email: string;
    password: string;
}

export class SignInDataDto implements ISignInDataDto {
    accessToken!: string;

    constructor(data?: ISignInDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
        }
    }

    static fromJS(data: any): SignInDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SignInDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        return data;
    }
}

export interface ISignInDataDto {
    accessToken: string;
}

export class SignInResponseDto implements ISignInResponseDto {
    data!: SignInDataDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: ISignInResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new SignInDataDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? SignInDataDto.fromJS(_data["data"]) : new SignInDataDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): SignInResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SignInResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface ISignInResponseDto {
    data: SignInDataDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class CustomerRoleSelectionDataDto implements ICustomerRoleSelectionDataDto {
    customerId!: string;
    roleId!: string;

    constructor(data?: ICustomerRoleSelectionDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.roleId = _data["roleId"];
        }
    }

    static fromJS(data: any): CustomerRoleSelectionDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerRoleSelectionDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["roleId"] = this.roleId;
        return data;
    }
}

export interface ICustomerRoleSelectionDataDto {
    customerId: string;
    roleId: string;
}

export class SelectCustomerRoleResponseDto implements ISelectCustomerRoleResponseDto {
    data!: CustomerRoleSelectionDataDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: ISelectCustomerRoleResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new CustomerRoleSelectionDataDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? CustomerRoleSelectionDataDto.fromJS(_data["data"]) : new CustomerRoleSelectionDataDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): SelectCustomerRoleResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SelectCustomerRoleResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface ISelectCustomerRoleResponseDto {
    data: CustomerRoleSelectionDataDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class UserCustomers implements IUserCustomers {
    customerId!: string;
    customerName!: string;
    roleId!: number;
    roleName!: string;

    constructor(data?: IUserCustomers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.customerName = _data["customerName"];
            this.roleId = _data["roleId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserCustomers {
        data = typeof data === 'object' ? data : {};
        let result = new UserCustomers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IUserCustomers {
    customerId: string;
    customerName: string;
    roleId: number;
    roleName: string;
}

export class SignInUserDataDto implements ISignInUserDataDto {
    id!: string;
    name!: string;
    email!: string;
    userCustomers?: UserCustomers[];

    constructor(data?: ISignInUserDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            if (Array.isArray(_data["userCustomers"])) {
                this.userCustomers = [] as any;
                for (let item of _data["userCustomers"])
                    this.userCustomers!.push(UserCustomers.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SignInUserDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SignInUserDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        if (Array.isArray(this.userCustomers)) {
            data["userCustomers"] = [];
            for (let item of this.userCustomers)
                data["userCustomers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISignInUserDataDto {
    id: string;
    name: string;
    email: string;
    userCustomers?: UserCustomers[];
}

export class UserProfileResponseDto implements IUserProfileResponseDto {
    data!: SignInUserDataDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IUserProfileResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new SignInUserDataDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? SignInUserDataDto.fromJS(_data["data"]) : new SignInUserDataDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): UserProfileResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IUserProfileResponseDto {
    data: SignInUserDataDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class CreateUserRequestDto implements ICreateUserRequestDto {
    file!: string;
    roleId!: number;
    title!: string;
    name!: string;
    email!: string;
    telephone?: string;
    mobile!: string;
    note?: string;
    emailNotification!: boolean;
    createInspection!: boolean;
    customerId!: string;
    addressLine1!: string;
    addressLine2!: string;
    city!: string;
    county!: string;
    postCode!: string;
    country!: string;

    constructor(data?: ICreateUserRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file = _data["file"];
            this.roleId = _data["roleId"];
            this.title = _data["title"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.telephone = _data["telephone"];
            this.mobile = _data["mobile"];
            this.note = _data["note"];
            this.emailNotification = _data["emailNotification"];
            this.createInspection = _data["createInspection"];
            this.customerId = _data["customerId"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): CreateUserRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file"] = this.file;
        data["roleId"] = this.roleId;
        data["title"] = this.title;
        data["name"] = this.name;
        data["email"] = this.email;
        data["telephone"] = this.telephone;
        data["mobile"] = this.mobile;
        data["note"] = this.note;
        data["emailNotification"] = this.emailNotification;
        data["createInspection"] = this.createInspection;
        data["customerId"] = this.customerId;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        return data;
    }
}

export interface ICreateUserRequestDto {
    file: string;
    roleId: number;
    title: string;
    name: string;
    email: string;
    telephone?: string;
    mobile: string;
    note?: string;
    emailNotification: boolean;
    createInspection: boolean;
    customerId: string;
    addressLine1: string;
    addressLine2: string;
    city: string;
    county: string;
    postCode: string;
    country: string;
}

export class UserInfoDto implements IUserInfoDto {
    id!: string;
    name!: string;
    email!: string;
    mobile!: string;

    constructor(data?: IUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.mobile = _data["mobile"];
        }
    }

    static fromJS(data: any): UserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["mobile"] = this.mobile;
        return data;
    }
}

export interface IUserInfoDto {
    id: string;
    name: string;
    email: string;
    mobile: string;
}

export class UserListDtoResponse implements IUserListDtoResponse {
    id!: string;
    roleId!: number;
    user!: UserInfoDto;

    constructor(data?: IUserListDtoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserInfoDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roleId = _data["roleId"];
            this.user = _data["user"] ? UserInfoDto.fromJS(_data["user"]) : new UserInfoDto();
        }
    }

    static fromJS(data: any): UserListDtoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDtoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roleId"] = this.roleId;
        data["user"] = this.user ? this.user.toJSON() : this.user;
        return data;
    }
}

export interface IUserListDtoResponse {
    id: string;
    roleId: number;
    user: UserInfoDto;
}

export class PaginationMeta implements IPaginationMeta {
    itemCount!: number;
    totalItems?: number;
    itemsPerPage!: number;
    totalPages?: number;
    currentPage!: number;

    constructor(data?: IPaginationMeta) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemCount = _data["itemCount"];
            this.totalItems = _data["totalItems"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.totalPages = _data["totalPages"];
            this.currentPage = _data["currentPage"];
        }
    }

    static fromJS(data: any): PaginationMeta {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationMeta();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCount"] = this.itemCount;
        data["totalItems"] = this.totalItems;
        data["itemsPerPage"] = this.itemsPerPage;
        data["totalPages"] = this.totalPages;
        data["currentPage"] = this.currentPage;
        return data;
    }
}

export interface IPaginationMeta {
    itemCount: number;
    totalItems?: number;
    itemsPerPage: number;
    totalPages?: number;
    currentPage: number;
}

export class UserPaginationResponseDto implements IUserPaginationResponseDto {
    items!: UserListDtoResponse[];
    meta!: PaginationMeta;

    constructor(data?: IUserPaginationResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.meta = new PaginationMeta();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserListDtoResponse.fromJS(item));
            }
            this.meta = _data["meta"] ? PaginationMeta.fromJS(_data["meta"]) : new PaginationMeta();
        }
    }

    static fromJS(data: any): UserPaginationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserPaginationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["meta"] = this.meta ? this.meta.toJSON() : this.meta;
        return data;
    }
}

export interface IUserPaginationResponseDto {
    items: UserListDtoResponse[];
    meta: PaginationMeta;
}

export class UserPaginationResponse implements IUserPaginationResponse {
    data!: UserPaginationResponseDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IUserPaginationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new UserPaginationResponseDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserPaginationResponseDto.fromJS(_data["data"]) : new UserPaginationResponseDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): UserPaginationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserPaginationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IUserPaginationResponse {
    data: UserPaginationResponseDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class GetUserRequestDto implements IGetUserRequestDto {
    page!: number;
    take!: number;
    searchTerm?: string;

    constructor(data?: IGetUserRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.page = 1;
            this.take = 10;
            this.searchTerm = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] !== undefined ? _data["page"] : 1;
            this.take = _data["take"] !== undefined ? _data["take"] : 10;
            this.searchTerm = _data["searchTerm"] !== undefined ? _data["searchTerm"] : "";
        }
    }

    static fromJS(data: any): GetUserRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["take"] = this.take;
        data["searchTerm"] = this.searchTerm;
        return data;
    }
}

export interface IGetUserRequestDto {
    page: number;
    take: number;
    searchTerm?: string;
}

export class InspectionRequestDto implements IInspectionRequestDto {
    id!: string;
    name?: string;
    template?: number;
    type?: number;
    locationOfKeys?: string;
    keyReturnInstruction?: string;
    notes?: string;
    propertyId!: string;

    constructor(data?: IInspectionRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "0";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "0";
            this.name = _data["name"];
            this.template = _data["template"];
            this.type = _data["type"];
            this.locationOfKeys = _data["locationOfKeys"];
            this.keyReturnInstruction = _data["keyReturnInstruction"];
            this.notes = _data["notes"];
            this.propertyId = _data["propertyId"];
        }
    }

    static fromJS(data: any): InspectionRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["template"] = this.template;
        data["type"] = this.type;
        data["locationOfKeys"] = this.locationOfKeys;
        data["keyReturnInstruction"] = this.keyReturnInstruction;
        data["notes"] = this.notes;
        data["propertyId"] = this.propertyId;
        return data;
    }
}

export interface IInspectionRequestDto {
    id: string;
    name?: string;
    template?: number;
    type?: number;
    locationOfKeys?: string;
    keyReturnInstruction?: string;
    notes?: string;
    propertyId: string;
}

export class InspectionCreateResponseDto implements IInspectionCreateResponseDto {
    data!: InspectionRequestDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IInspectionCreateResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new InspectionRequestDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? InspectionRequestDto.fromJS(_data["data"]) : new InspectionRequestDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): InspectionCreateResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionCreateResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IInspectionCreateResponseDto {
    data: InspectionRequestDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class PropertyRequestDto implements IPropertyRequestDto {
    id!: string;
    referenceNo?: string;
    addressLine1!: string;
    addressLine2?: string;
    city!: string;
    county!: string;
    postCode!: string;
    country!: string;
    latitude?: string;
    longitude?: string;
    noOfBeds?: number;
    noOfBaths?: number;
    noOfGarages?: number;
    hasParking?: boolean;
    hasGarden?: boolean;
    uprn?: string;
    parentPropertyId?: string;
    notes?: string;
    epcRating?: string;
    transferPastInspection?: boolean;
    additionalAreas?: number;
    hasGarage?: boolean;
    furnishType?: number;
    propertyType?: number;
    detachmentType?: number;
    imageUrl?: string;
    clientId?: string;

    constructor(data?: IPropertyRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "0";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "0";
            this.referenceNo = _data["referenceNo"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.noOfBeds = _data["noOfBeds"];
            this.noOfBaths = _data["noOfBaths"];
            this.noOfGarages = _data["noOfGarages"];
            this.hasParking = _data["hasParking"];
            this.hasGarden = _data["hasGarden"];
            this.uprn = _data["uprn"];
            this.parentPropertyId = _data["parentPropertyId"];
            this.notes = _data["notes"];
            this.epcRating = _data["epcRating"];
            this.transferPastInspection = _data["transferPastInspection"];
            this.additionalAreas = _data["additionalAreas"];
            this.hasGarage = _data["hasGarage"];
            this.furnishType = _data["furnishType"];
            this.propertyType = _data["propertyType"];
            this.detachmentType = _data["detachmentType"];
            this.imageUrl = _data["imageUrl"];
            this.clientId = _data["clientId"];
        }
    }

    static fromJS(data: any): PropertyRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["referenceNo"] = this.referenceNo;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["noOfBeds"] = this.noOfBeds;
        data["noOfBaths"] = this.noOfBaths;
        data["noOfGarages"] = this.noOfGarages;
        data["hasParking"] = this.hasParking;
        data["hasGarden"] = this.hasGarden;
        data["uprn"] = this.uprn;
        data["parentPropertyId"] = this.parentPropertyId;
        data["notes"] = this.notes;
        data["epcRating"] = this.epcRating;
        data["transferPastInspection"] = this.transferPastInspection;
        data["additionalAreas"] = this.additionalAreas;
        data["hasGarage"] = this.hasGarage;
        data["furnishType"] = this.furnishType;
        data["propertyType"] = this.propertyType;
        data["detachmentType"] = this.detachmentType;
        data["imageUrl"] = this.imageUrl;
        data["clientId"] = this.clientId;
        return data;
    }
}

export interface IPropertyRequestDto {
    id: string;
    referenceNo?: string;
    addressLine1: string;
    addressLine2?: string;
    city: string;
    county: string;
    postCode: string;
    country: string;
    latitude?: string;
    longitude?: string;
    noOfBeds?: number;
    noOfBaths?: number;
    noOfGarages?: number;
    hasParking?: boolean;
    hasGarden?: boolean;
    uprn?: string;
    parentPropertyId?: string;
    notes?: string;
    epcRating?: string;
    transferPastInspection?: boolean;
    additionalAreas?: number;
    hasGarage?: boolean;
    furnishType?: number;
    propertyType?: number;
    detachmentType?: number;
    imageUrl?: string;
    clientId?: string;
}

export class PropertyListDtoResponse implements IPropertyListDtoResponse {
    id!: string;
    addressLine1!: string;
    addressLine2!: string;
    city!: string;
    county!: string;
    postCode!: string;
    country!: string;
    noOfBeds!: number;
    noOfBaths!: number;
    noOfGarages!: number;
    hasParking!: boolean;
    hasGarden!: boolean;
    hasGarage!: boolean;

    constructor(data?: IPropertyListDtoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
            this.noOfBeds = _data["noOfBeds"];
            this.noOfBaths = _data["noOfBaths"];
            this.noOfGarages = _data["noOfGarages"];
            this.hasParking = _data["hasParking"];
            this.hasGarden = _data["hasGarden"];
            this.hasGarage = _data["hasGarage"];
        }
    }

    static fromJS(data: any): PropertyListDtoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyListDtoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        data["noOfBeds"] = this.noOfBeds;
        data["noOfBaths"] = this.noOfBaths;
        data["noOfGarages"] = this.noOfGarages;
        data["hasParking"] = this.hasParking;
        data["hasGarden"] = this.hasGarden;
        data["hasGarage"] = this.hasGarage;
        return data;
    }
}

export interface IPropertyListDtoResponse {
    id: string;
    addressLine1: string;
    addressLine2: string;
    city: string;
    county: string;
    postCode: string;
    country: string;
    noOfBeds: number;
    noOfBaths: number;
    noOfGarages: number;
    hasParking: boolean;
    hasGarden: boolean;
    hasGarage: boolean;
}

export class PropertyPaginationResponseDto implements IPropertyPaginationResponseDto {
    items!: PropertyListDtoResponse[];
    meta!: PaginationMeta;

    constructor(data?: IPropertyPaginationResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.meta = new PaginationMeta();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PropertyListDtoResponse.fromJS(item));
            }
            this.meta = _data["meta"] ? PaginationMeta.fromJS(_data["meta"]) : new PaginationMeta();
        }
    }

    static fromJS(data: any): PropertyPaginationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyPaginationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["meta"] = this.meta ? this.meta.toJSON() : this.meta;
        return data;
    }
}

export interface IPropertyPaginationResponseDto {
    items: PropertyListDtoResponse[];
    meta: PaginationMeta;
}

export class PropertyPaginationResponse implements IPropertyPaginationResponse {
    data!: PropertyPaginationResponseDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IPropertyPaginationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PropertyPaginationResponseDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? PropertyPaginationResponseDto.fromJS(_data["data"]) : new PropertyPaginationResponseDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): PropertyPaginationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyPaginationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IPropertyPaginationResponse {
    data: PropertyPaginationResponseDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class PaginationRequest implements IPaginationRequest {
    page!: number;
    take!: number;
    searchTerm?: string;

    constructor(data?: IPaginationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.page = 1;
            this.take = 10;
            this.searchTerm = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] !== undefined ? _data["page"] : 1;
            this.take = _data["take"] !== undefined ? _data["take"] : 10;
            this.searchTerm = _data["searchTerm"] !== undefined ? _data["searchTerm"] : "";
        }
    }

    static fromJS(data: any): PaginationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["take"] = this.take;
        data["searchTerm"] = this.searchTerm;
        return data;
    }
}

export interface IPaginationRequest {
    page: number;
    take: number;
    searchTerm?: string;
}

export class CreateCustomerDto implements ICreateCustomerDto {
    id!: string;
    name!: string;
    phone!: string;
    addressLine1!: string | null;
    addressLine2!: string | null;
    city!: string | null;
    county!: string | null;
    postCode!: string | null;
    country!: string | null;

    constructor(data?: ICreateCustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): CreateCustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        return data;
    }
}

export interface ICreateCustomerDto {
    id: string;
    name: string;
    phone: string;
    addressLine1: string | null;
    addressLine2: string | null;
    city: string | null;
    county: string | null;
    postCode: string | null;
    country: string | null;
}

export class ClientDataDto implements IClientDataDto {
    id?: string;
    title?: string;
    name?: string;
    email?: string;
    company?: string;
    telephone?: string;
    mobile?: string;
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    county?: string;
    postCode?: string;
    country?: string;
    website?: string;
    emailNotification?: boolean;
    companyNo?: string;
    vat?: string;
    billingEmail?: string;
    logoUrl?: string;
    additionalEmails?: string;
    showInvoice?: boolean;
    defaultInvoicePayee?: number;
    showIntegrations?: boolean;
    allowCreateInspection?: boolean;
    allowEditAppointments?: boolean;
    showClerkInfo?: boolean;
    notes?: string;

    constructor(data?: IClientDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.company = _data["company"];
            this.telephone = _data["telephone"];
            this.mobile = _data["mobile"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
            this.website = _data["website"];
            this.emailNotification = _data["emailNotification"];
            this.companyNo = _data["companyNo"];
            this.vat = _data["vat"];
            this.billingEmail = _data["billingEmail"];
            this.logoUrl = _data["logoUrl"];
            this.additionalEmails = _data["additionalEmails"];
            this.showInvoice = _data["showInvoice"];
            this.defaultInvoicePayee = _data["defaultInvoicePayee"];
            this.showIntegrations = _data["showIntegrations"];
            this.allowCreateInspection = _data["allowCreateInspection"];
            this.allowEditAppointments = _data["allowEditAppointments"];
            this.showClerkInfo = _data["showClerkInfo"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): ClientDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["name"] = this.name;
        data["email"] = this.email;
        data["company"] = this.company;
        data["telephone"] = this.telephone;
        data["mobile"] = this.mobile;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        data["website"] = this.website;
        data["emailNotification"] = this.emailNotification;
        data["companyNo"] = this.companyNo;
        data["vat"] = this.vat;
        data["billingEmail"] = this.billingEmail;
        data["logoUrl"] = this.logoUrl;
        data["additionalEmails"] = this.additionalEmails;
        data["showInvoice"] = this.showInvoice;
        data["defaultInvoicePayee"] = this.defaultInvoicePayee;
        data["showIntegrations"] = this.showIntegrations;
        data["allowCreateInspection"] = this.allowCreateInspection;
        data["allowEditAppointments"] = this.allowEditAppointments;
        data["showClerkInfo"] = this.showClerkInfo;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IClientDataDto {
    id?: string;
    title?: string;
    name?: string;
    email?: string;
    company?: string;
    telephone?: string;
    mobile?: string;
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    county?: string;
    postCode?: string;
    country?: string;
    website?: string;
    emailNotification?: boolean;
    companyNo?: string;
    vat?: string;
    billingEmail?: string;
    logoUrl?: string;
    additionalEmails?: string;
    showInvoice?: boolean;
    defaultInvoicePayee?: number;
    showIntegrations?: boolean;
    allowCreateInspection?: boolean;
    allowEditAppointments?: boolean;
    showClerkInfo?: boolean;
    notes?: string;
}

export class ClientResponseDto implements IClientResponseDto {
    data!: ClientDataDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IClientResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new ClientDataDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? ClientDataDto.fromJS(_data["data"]) : new ClientDataDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ClientResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IClientResponseDto {
    data: ClientDataDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class ClientListDataDto implements IClientListDataDto {
    id!: string;
    name!: string;
    email!: string;
    company!: string;
    telephone!: string;
    addressLine1!: string;
    addressLine2!: string;
    city!: string;
    county!: string;
    postCode!: string;
    country!: string;

    constructor(data?: IClientListDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.company = _data["company"];
            this.telephone = _data["telephone"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.county = _data["county"];
            this.postCode = _data["postCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): ClientListDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientListDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["company"] = this.company;
        data["telephone"] = this.telephone;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["county"] = this.county;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        return data;
    }
}

export interface IClientListDataDto {
    id: string;
    name: string;
    email: string;
    company: string;
    telephone: string;
    addressLine1: string;
    addressLine2: string;
    city: string;
    county: string;
    postCode: string;
    country: string;
}

export class ClientPaginationResponseDto implements IClientPaginationResponseDto {
    items!: ClientListDataDto[];
    meta!: PaginationMeta;

    constructor(data?: IClientPaginationResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.meta = new PaginationMeta();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClientListDataDto.fromJS(item));
            }
            this.meta = _data["meta"] ? PaginationMeta.fromJS(_data["meta"]) : new PaginationMeta();
        }
    }

    static fromJS(data: any): ClientPaginationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPaginationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["meta"] = this.meta ? this.meta.toJSON() : this.meta;
        return data;
    }
}

export interface IClientPaginationResponseDto {
    items: ClientListDataDto[];
    meta: PaginationMeta;
}

export class ClientPaginationResponse implements IClientPaginationResponse {
    data!: ClientPaginationResponseDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IClientPaginationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new ClientPaginationResponseDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? ClientPaginationResponseDto.fromJS(_data["data"]) : new ClientPaginationResponseDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ClientPaginationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPaginationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IClientPaginationResponse {
    data: ClientPaginationResponseDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class ContactRequestDto implements IContactRequestDto {
    id!: string;
    name?: string;
    email?: string;
    mobile?: string;
    isSignee?: boolean;
    notifyConductDate?: boolean;
    canDeliverReport?: boolean;
    title?: string;
    telephone?: string;
    note?: string;
    inspectionId!: string;

    constructor(data?: IContactRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "0";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "0";
            this.name = _data["name"];
            this.email = _data["email"];
            this.mobile = _data["mobile"];
            this.isSignee = _data["isSignee"];
            this.notifyConductDate = _data["notifyConductDate"];
            this.canDeliverReport = _data["canDeliverReport"];
            this.title = _data["title"];
            this.telephone = _data["telephone"];
            this.note = _data["note"];
            this.inspectionId = _data["inspectionId"];
        }
    }

    static fromJS(data: any): ContactRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["mobile"] = this.mobile;
        data["isSignee"] = this.isSignee;
        data["notifyConductDate"] = this.notifyConductDate;
        data["canDeliverReport"] = this.canDeliverReport;
        data["title"] = this.title;
        data["telephone"] = this.telephone;
        data["note"] = this.note;
        data["inspectionId"] = this.inspectionId;
        return data;
    }
}

export interface IContactRequestDto {
    id: string;
    name?: string;
    email?: string;
    mobile?: string;
    isSignee?: boolean;
    notifyConductDate?: boolean;
    canDeliverReport?: boolean;
    title?: string;
    telephone?: string;
    note?: string;
    inspectionId: string;
}

export class ContactCreateResponseDto implements IContactCreateResponseDto {
    data!: ContactRequestDto;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IContactCreateResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new ContactRequestDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? ContactRequestDto.fromJS(_data["data"]) : new ContactRequestDto();
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ContactCreateResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactCreateResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IContactCreateResponseDto {
    data: ContactRequestDto;
    success: boolean;
    statusCode: number;
    message: string;
}

export class ContactDataDto implements IContactDataDto {
    id!: string;
    name!: string;
    email!: string;
    mobile!: string;
    isSignee!: boolean;
    notifyConductDate!: boolean;
    canDeliverReport!: boolean;
    inspectionId!: string;

    constructor(data?: IContactDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.mobile = _data["mobile"];
            this.isSignee = _data["isSignee"];
            this.notifyConductDate = _data["notifyConductDate"];
            this.canDeliverReport = _data["canDeliverReport"];
            this.inspectionId = _data["inspectionId"];
        }
    }

    static fromJS(data: any): ContactDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["mobile"] = this.mobile;
        data["isSignee"] = this.isSignee;
        data["notifyConductDate"] = this.notifyConductDate;
        data["canDeliverReport"] = this.canDeliverReport;
        data["inspectionId"] = this.inspectionId;
        return data;
    }
}

export interface IContactDataDto {
    id: string;
    name: string;
    email: string;
    mobile: string;
    isSignee: boolean;
    notifyConductDate: boolean;
    canDeliverReport: boolean;
    inspectionId: string;
}

export class ContactResponseDto implements IContactResponseDto {
    data!: ContactDataDto[];
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: IContactResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ContactDataDto.fromJS(item));
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ContactResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface IContactResponseDto {
    data: ContactDataDto[];
    success: boolean;
    statusCode: number;
    message: string;
}

export class CustomResponse implements ICustomResponse {
    data!: any | null;
    success!: boolean;
    statusCode!: number;
    message!: string;

    constructor(data?: ICustomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CustomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CustomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data;
    }
}

export interface ICustomResponse {
    data: any | null;
    success: boolean;
    statusCode: number;
    message: string;
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('AuthControllerClient___setUserCustomerRole', (data: any) => { const result = new SelectCustomerRoleResponseDto(); result.init(data); return result; });
  addResultTypeFactory('AuthControllerClient___getProfile', (data: any) => { const result = new UserProfileResponseDto(); result.init(data); return result; });












  addResultTypeFactory('ContactControllerClient___getContacts', (data: any) => { const result = new ContactResponseDto(); result.init(data); return result; });




}
//-----/PersistorHydrator.File----