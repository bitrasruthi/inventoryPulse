//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ContactControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetContactsContactControllerQueryParameters = {
  id: string ;
}

export type DeleteContactControllerQueryParameters = {
  id: string ;
}

export function saveUrl(): string {
  let url_ = getBaseUrl() + "/contact/createContact";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function saveMutationKey(): MutationKey {
  return trimArrayEnd([
      'ContactControllerClient',
      'save',
    ]);
}

export function useSaveMutation<TContext>(options?: Omit<UseMutationOptions<Types.ContactCreateResponseDto, unknown, Types.ContactRequestDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ContactCreateResponseDto, unknown, Types.ContactRequestDto, TContext> {
  const key = saveMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.ContactRequestDto) => Client.save(body),
    mutationKey: key,
  });
}
  
export function getContactsUrl(id: string): string {
  let url_ = getBaseUrl() + "/contact/getContactsByInspectionId/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getContactsDefaultOptions: Omit<UseQueryOptions<Types.ContactResponseDto, unknown, Types.ContactResponseDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.ContactResponseDto, unknown, Types.ContactResponseDto>, 'queryFn'>> = {
};
export function getGetContactsDefaultOptions() {
  return getContactsDefaultOptions;
};
export function setGetContactsDefaultOptions(options: typeof getContactsDefaultOptions) {
  getContactsDefaultOptions = options;
}

export function getContactsQueryKey(id: string): QueryKey;
export function getContactsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetContactsContactControllerQueryParameters;

    return trimArrayEnd([
        'ContactControllerClient',
        'getContacts',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'ContactControllerClient',
        'getContacts',
        ...params
      ]);
  }
}
export function __getContacts(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getContacts(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetContactsQuery<TSelectData = Types.ContactResponseDto, TError = unknown>(dto: GetContactsContactControllerQueryParameters, options?: Omit<UseQueryOptions<Types.ContactResponseDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetContactsQuery<TSelectData = Types.ContactResponseDto, TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.ContactResponseDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetContactsQuery<TSelectData = Types.ContactResponseDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ContactResponseDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetContactsContactControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.ContactResponseDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getContacts(context, axiosConfig) : __getContacts,
    queryKey: getContactsQueryKey(id),
    ...getContactsDefaultOptions as unknown as Omit<UseQueryOptions<Types.ContactResponseDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetContactsData(queryClient: QueryClient, updater: (data: Types.ContactResponseDto | undefined) => Types.ContactResponseDto, id: string) {
  queryClient.setQueryData(getContactsQueryKey(id),
    updater
  );
}

export function setGetContactsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ContactResponseDto | undefined) => Types.ContactResponseDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function deleteUrl(id: string): string {
  let url_ = getBaseUrl() + "/contact/deleteByContactId/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'ContactControllerClient',
      'delete',
      id as any,
    ]);
}

export function useDeleteMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.CustomResponse, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.CustomResponse, unknown, void, TContext> {
  const key = deleteMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.delete_(id),
    mutationKey: key,
  });
}
  
type Delete__MutationParameters = DeleteContactControllerQueryParameters

export function useDeleteMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.CustomResponse, unknown, Delete__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteContactControllerQueryParameters}): UseMutationResult<Types.CustomResponse, unknown, Delete__MutationParameters, TContext> {
  const key = deleteMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Delete__MutationParameters) => Client.delete_(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}