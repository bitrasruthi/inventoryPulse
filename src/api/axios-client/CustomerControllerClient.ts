//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../axios-client';
import { getAxios, getBaseUrl } from './helpers';

export function create(body: Types.CreateCustomerDto, config?: AxiosRequestConfig | undefined): Promise<Types.CreateCustomerDto> {
    let url_ = getBaseUrl() + "/customer/create";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreate,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreate?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreate(_response);
    });
}

function processCreate(response: AxiosResponse): Promise<Types.CreateCustomerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.CreateCustomerDto.fromJS(resultData200);
        return Promise.resolve<Types.CreateCustomerDto>(result200);

    } else if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201  = _responseText;
        result201 = Types.CreateCustomerDto.fromJS(resultData201);
        return Promise.resolve<Types.CreateCustomerDto>(result201);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CreateCustomerDto>(null as any);
}

export function getCustomerById(id: string, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/customer/getCustomerById/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetCustomerById,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetCustomerById?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetCustomerById(_response);
    });
}

function processGetCustomerById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}
let _requestConfigCreate: Partial<AxiosRequestConfig> | null;
export function getCreateRequestConfig() {
  return _requestConfigCreate;
}
export function setCreateRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreate = value;
}
export function patchCreateRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreate = patch(_requestConfigCreate ?? {});
}

let _requestConfigGetCustomerById: Partial<AxiosRequestConfig> | null;
export function getGetCustomerByIdRequestConfig() {
  return _requestConfigGetCustomerById;
}
export function setGetCustomerByIdRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetCustomerById = value;
}
export function patchGetCustomerByIdRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetCustomerById = patch(_requestConfigGetCustomerById ?? {});
}