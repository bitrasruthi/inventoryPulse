//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './AuthControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type SetUserCustomerRoleAuthControllerQueryParameters = {
  cusId: string ;
  roleId: number ;
}

export function loginUrl(): string {
  let url_ = getBaseUrl() + "/auth/login";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function loginMutationKey(): MutationKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'login',
    ]);
}

/**
 * @return Login successful
 */
export function useLoginMutation<TContext>(options?: Omit<UseMutationOptions<Types.Anonymous, unknown, Types.SignInDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Anonymous, unknown, Types.SignInDto, TContext> {
  const key = loginMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.SignInDto) => Client.login(body),
    mutationKey: key,
  });
}
  
export function setUserCustomerRoleUrl(cusId: string, roleId: number): string {
  let url_ = getBaseUrl() + "/auth/set-user-customer-role/{cusId}/{roleId}";
if (cusId === undefined || cusId === null)
  throw new Error("The parameter 'cusId' must be defined.");
url_ = url_.replace("{cusId}", encodeURIComponent("" + cusId));
if (roleId === undefined || roleId === null)
  throw new Error("The parameter 'roleId' must be defined.");
url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let setUserCustomerRoleDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getSetUserCustomerRoleDefaultOptions() {
  return setUserCustomerRoleDefaultOptions;
};
export function setSetUserCustomerRoleDefaultOptions(options: typeof setUserCustomerRoleDefaultOptions) {
  setUserCustomerRoleDefaultOptions = options;
}

export function setUserCustomerRoleQueryKey(dto: SetUserCustomerRoleAuthControllerQueryParameters): QueryKey;
export function setUserCustomerRoleQueryKey(cusId: string, roleId: number): QueryKey;
export function setUserCustomerRoleQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { cusId, roleId,  } = params[0] as SetUserCustomerRoleAuthControllerQueryParameters;

    return trimArrayEnd([
        'AuthControllerClient',
        'setUserCustomerRole',
        cusId as any,
        roleId as any,
      ]);
  } else {
    return trimArrayEnd([
        'AuthControllerClient',
        'setUserCustomerRole',
        ...params
      ]);
  }
}
export function __setUserCustomerRole(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.setUserCustomerRole(
      context.queryKey[2] as string,       context.queryKey[3] as number,axiosConfig    );
}

export function useSetUserCustomerRoleQuery<TSelectData = void, TError = unknown>(dto: SetUserCustomerRoleAuthControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useSetUserCustomerRoleQuery<TSelectData = void, TError = unknown>(cusId: string, roleId: number, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useSetUserCustomerRoleQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let cusId: any = undefined;
  let roleId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ cusId, roleId,  } = params[0] as SetUserCustomerRoleAuthControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [cusId, roleId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __setUserCustomerRole(context, axiosConfig) : __setUserCustomerRole,
    queryKey: setUserCustomerRoleQueryKey(cusId, roleId),
    ...setUserCustomerRoleDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setSetUserCustomerRoleData(queryClient: QueryClient, updater: (data: void | undefined) => void, cusId: string, roleId: number) {
  queryClient.setQueryData(setUserCustomerRoleQueryKey(cusId, roleId),
    updater
  );
}

export function setSetUserCustomerRoleDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getCookiesUrl(): string {
  let url_ = getBaseUrl() + "/auth/get-cookies";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getCookiesDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetCookiesDefaultOptions() {
  return getCookiesDefaultOptions;
};
export function setGetCookiesDefaultOptions(options: typeof getCookiesDefaultOptions) {
  getCookiesDefaultOptions = options;
}

export function getCookiesQueryKey(): QueryKey;
export function getCookiesQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AuthControllerClient',
      'getCookies',
    ]);
}
export function __getCookies(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getCookies(
axiosConfig    );
}

export function useGetCookiesQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetCookiesQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getCookies(context, axiosConfig) : __getCookies,
    queryKey: getCookiesQueryKey(),
    ...getCookiesDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetCookiesData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getCookiesQueryKey(),
    updater
  );
}

export function setGetCookiesDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}