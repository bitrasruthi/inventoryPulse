//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../axios-client';
import { getAxios, getBaseUrl } from './helpers';

export function login(body: Types.SignInDto, config?: AxiosRequestConfig | undefined): Promise<Types.SignInResponseDto> {
    let url_ = getBaseUrl() + "/auth/login";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogin,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogin?.headers,
            "Content-Type": "application/json",
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogin(_response);
    });
}

function processLogin(response: AxiosResponse): Promise<Types.SignInResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.SignInResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.SignInResponseDto>(result200);

    } else if (status === 201) {
        const _responseText = response.data;
        return throwException("A server side error occurred.", status, _responseText, _headers);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.SignInResponseDto>(null as any);
}

/**
 * @return CustomerId and RoleId set successfully
 */
export function setUserCustomerRole(cusId: string, roleId: string, config?: AxiosRequestConfig | undefined): Promise<Types.SelectCustomerRoleResponseDto> {
    let url_ = getBaseUrl() + "/auth/set-user-customer-role/{cusId}/{roleId}";
    if (cusId === undefined || cusId === null)
      throw new Error("The parameter 'cusId' must be defined.");
    url_ = url_.replace("{cusId}", encodeURIComponent("" + cusId));
    if (roleId === undefined || roleId === null)
      throw new Error("The parameter 'roleId' must be defined.");
    url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSetUserCustomerRole,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigSetUserCustomerRole?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSetUserCustomerRole(_response);
    });
}

function processSetUserCustomerRole(response: AxiosResponse): Promise<Types.SelectCustomerRoleResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.SelectCustomerRoleResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.SelectCustomerRoleResponseDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.SelectCustomerRoleResponseDto>(null as any);
}

export function getCookies(config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/auth/get-cookies";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetCookies,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetCookies?.headers,
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetCookies(_response);
    });
}

function processGetCookies(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

export function getProfile(config?: AxiosRequestConfig | undefined): Promise<Types.UserProfileResponseDto> {
    let url_ = getBaseUrl() + "/auth/getProfile";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetProfile,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetProfile?.headers,
            "Accept": "application/json",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetProfile(_response);
    });
}

function processGetProfile(response: AxiosResponse): Promise<Types.UserProfileResponseDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.UserProfileResponseDto.fromJS(resultData200);
        return Promise.resolve<Types.UserProfileResponseDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.UserProfileResponseDto>(null as any);
}
let _requestConfigLogin: Partial<AxiosRequestConfig> | null;
export function getLoginRequestConfig() {
  return _requestConfigLogin;
}
export function setLoginRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogin = value;
}
export function patchLoginRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogin = patch(_requestConfigLogin ?? {});
}

let _requestConfigSetUserCustomerRole: Partial<AxiosRequestConfig> | null;
export function getSetUserCustomerRoleRequestConfig() {
  return _requestConfigSetUserCustomerRole;
}
export function setSetUserCustomerRoleRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSetUserCustomerRole = value;
}
export function patchSetUserCustomerRoleRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSetUserCustomerRole = patch(_requestConfigSetUserCustomerRole ?? {});
}

let _requestConfigGetCookies: Partial<AxiosRequestConfig> | null;
export function getGetCookiesRequestConfig() {
  return _requestConfigGetCookies;
}
export function setGetCookiesRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetCookies = value;
}
export function patchGetCookiesRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetCookies = patch(_requestConfigGetCookies ?? {});
}

let _requestConfigGetProfile: Partial<AxiosRequestConfig> | null;
export function getGetProfileRequestConfig() {
  return _requestConfigGetProfile;
}
export function setGetProfileRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetProfile = value;
}
export function patchGetProfileRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetProfile = patch(_requestConfigGetProfile ?? {});
}