//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './CustomerControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetCustomerByIsCustomerControllerQueryParameters = {
  id: string ;
}

export function createCustomerUrl(): string {
  let url_ = getBaseUrl() + "/customer/createCustomer";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createCustomerMutationKey(): MutationKey {
  return trimArrayEnd([
      'CustomerControllerClient',
      'createCustomer',
    ]);
}

export function useCreateCustomerMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.CreateCustomerDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.CreateCustomerDto, TContext> {
  const key = createCustomerMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateCustomerDto) => Client.createCustomer(body),
    mutationKey: key,
  });
}
  
export function getCustomerByIsUrl(id: string): string {
  let url_ = getBaseUrl() + "/customer/getCustomerById/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getCustomerByIsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<void, unknown, void>, 'queryFn'>> = {
};
export function getGetCustomerByIsDefaultOptions() {
  return getCustomerByIsDefaultOptions;
};
export function setGetCustomerByIsDefaultOptions(options: typeof getCustomerByIsDefaultOptions) {
  getCustomerByIsDefaultOptions = options;
}

export function getCustomerByIsQueryKey(id: string): QueryKey;
export function getCustomerByIsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetCustomerByIsCustomerControllerQueryParameters;

    return trimArrayEnd([
        'CustomerControllerClient',
        'getCustomerByIs',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'CustomerControllerClient',
        'getCustomerByIs',
        ...params
      ]);
  }
}
export function __getCustomerByIs(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getCustomerByIs(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetCustomerByIsQuery<TSelectData = void, TError = unknown>(dto: GetCustomerByIsCustomerControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetCustomerByIsQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetCustomerByIsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetCustomerByIsCustomerControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getCustomerByIs(context, axiosConfig) : __getCustomerByIs,
    queryKey: getCustomerByIsQueryKey(id),
    ...getCustomerByIsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetCustomerByIsData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getCustomerByIsQueryKey(id),
    updater
  );
}

export function setGetCustomerByIsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}